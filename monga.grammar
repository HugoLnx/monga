X  programa : {declaracao}
X  declaracao : dec-variavel | dec-funcao
X  dec-variavel : tipo lista-nomes ';'
X  lista-nomes : ID { ',' ID }
X  tipo : tipo-base | tipo '[' ']'
X  tipo-base : 'int' | 'char' | 'float'
X  dec-funcao : tipo-retorno ID '(' parametros ')' bloco
X  tipo-retorno : tipo | 'void'
X  parametros : /* vazio */ | parametro { ',' parametro }
X  parametro : tipo ID
X  bloco : '{' { dec-variavel } { comando } '}'
   comando : 'if' '(' exp ')' comando parte-else
    | 'while' '(' exp ')' comando
X   | var '=' exp ';'
X   | 'return' [ exp ] ';'
X   | chamada ';'
   	| bloco
   parte-else : /* vazio */ | 'else' comando
X  var : ID | exp '[' exp ']'
X  exp : NUMERAL
X   | LITERAL
X  	| var
X  	| '(' exp ')'
X  	| chamada
X  	| 'new' tipo '[' exp ']'
X  	| '-' exp
X  	| exp '+' exp
X  	| exp '-' exp
X  	| exp '*' exp
X  	| exp '/' exp
X  	| exp '==' exp
X  	| exp '<=' exp
X  	| exp '>=' exp
X  	| exp '<' exp
X  	| exp '>' exp
X  	| '!' exp
X  	| exp '&&' exp
X  	| exp '||' exp
X  chamada : ID '(' lista-exp ')'
X  lista-exp : /* vazio */ | exp { ',' exp }
